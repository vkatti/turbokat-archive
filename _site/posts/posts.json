[
  {
    "path": "posts/2021-07-27-drilldown/",
    "title": "Interactive Drill-down Tables using {reactable}",
    "description": "How to create multi-level tables with hidden rows",
    "author": [
      {
        "name": "Vishal Katti",
        "url": {}
      }
    ],
    "date": "2021-07-27",
    "categories": [
      "Rstats",
      "reactable",
      "drill-down"
    ],
    "contents": "\r\n\r\nContents\r\nTop-Level data: course\r\nSecond Level Data: student\r\nVanilla reactable\r\nBasic Formatting\r\nGrouping and Aggregating\r\nThe final Drill-down Table\r\nConclusion\r\nReferences & Citations\r\n\r\n\r\nd-article div.sourceCode code,\r\nd-article pre code {\r\n    font-family: \"Fira Code\", monospace;\r\n}\r\nWe often come across denormalized data that has 2 or more levels of information. For example, top-level info like course info with data fields like course id, course name, description, start/end date and second-level info like student info with data fields like with student id, student name, age and gender. We may also have these two groups of data as separate tables with a primary-key foreign-key design, usually from a well-designed SQL database.\r\nLet us create some data.\r\nTop-Level data: course\r\n\r\n\r\nlibrary(dplyr, quietly = TRUE, warn.conflicts = FALSE)\r\nlibrary(rmarkdown, quietly = TRUE, warn.conflicts = FALSE)\r\n\r\ncourse <- tibble(course_id           = 1:4,\r\n                 course_name         = paste(\"Course\", LETTERS[1:4]),\r\n                 start_date          = seq.Date(from = lubridate::as_date(\"2021-01-01\"), by = \"month\", length.out = 4),\r\n                 end_date            = lubridate::ceiling_date(start_date, unit = \"month\") - 1)\r\n\r\npaged_table(course)\r\n\r\n\r\n\r\n\r\n{\"columns\":[{\"label\":[\"course_id\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"course_name\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"start_date\"],\"name\":[3],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"end_date\"],\"name\":[4],\"type\":[\"date\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"Course A\",\"3\":\"2021-01-01\",\"4\":\"2021-01-31\"},{\"1\":\"2\",\"2\":\"Course B\",\"3\":\"2021-02-01\",\"4\":\"2021-02-28\"},{\"1\":\"3\",\"2\":\"Course C\",\"3\":\"2021-03-01\",\"4\":\"2021-03-31\"},{\"1\":\"4\",\"2\":\"Course D\",\"3\":\"2021-04-01\",\"4\":\"2021-04-30\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\r\n  \r\n\r\nSecond Level Data: student\r\n\r\n\r\nset.seed(42)\r\nstudent <- tibble(s_id      = 1:20,\r\n                  s_name    = paste(\"Student\", LETTERS[1:20]),\r\n                  gender    = sample(c(\"X\",\"Y\",\"Z\"), 20, replace = TRUE),\r\n                  age       = sample(18:35, 20, replace = TRUE),\r\n                  course_id = sample(1:4, 20, replace = TRUE))\r\n\r\npaged_table(student)\r\n\r\n\r\n\r\n\r\n{\"columns\":[{\"label\":[\"s_id\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"s_name\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"gender\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"age\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"course_id\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"Student A\",\"3\":\"X\",\"4\":\"21\",\"5\":\"3\"},{\"1\":\"2\",\"2\":\"Student B\",\"3\":\"X\",\"4\":\"22\",\"5\":\"4\"},{\"1\":\"3\",\"2\":\"Student C\",\"3\":\"X\",\"4\":\"30\",\"5\":\"3\"},{\"1\":\"4\",\"2\":\"Student D\",\"3\":\"X\",\"4\":\"22\",\"5\":\"1\"},{\"1\":\"5\",\"2\":\"Student E\",\"3\":\"Y\",\"4\":\"19\",\"5\":\"1\"},{\"1\":\"6\",\"2\":\"Student F\",\"3\":\"Y\",\"4\":\"25\",\"5\":\"2\"},{\"1\":\"7\",\"2\":\"Student G\",\"3\":\"Y\",\"4\":\"20\",\"5\":\"2\"},{\"1\":\"8\",\"2\":\"Student H\",\"3\":\"X\",\"4\":\"18\",\"5\":\"2\"},{\"1\":\"9\",\"2\":\"Student I\",\"3\":\"Z\",\"4\":\"27\",\"5\":\"2\"},{\"1\":\"10\",\"2\":\"Student J\",\"3\":\"Z\",\"4\":\"28\",\"5\":\"2\"},{\"1\":\"11\",\"2\":\"Student K\",\"3\":\"X\",\"4\":\"32\",\"5\":\"4\"},{\"1\":\"12\",\"2\":\"Student L\",\"3\":\"X\",\"4\":\"25\",\"5\":\"3\"},{\"1\":\"13\",\"2\":\"Student M\",\"3\":\"Y\",\"4\":\"21\",\"5\":\"2\"},{\"1\":\"14\",\"2\":\"Student N\",\"3\":\"Y\",\"4\":\"21\",\"5\":\"1\"},{\"1\":\"15\",\"2\":\"Student O\",\"3\":\"Y\",\"4\":\"35\",\"5\":\"2\"},{\"1\":\"16\",\"2\":\"Student P\",\"3\":\"Z\",\"4\":\"30\",\"5\":\"3\"},{\"1\":\"17\",\"2\":\"Student Q\",\"3\":\"Z\",\"4\":\"22\",\"5\":\"2\"},{\"1\":\"18\",\"2\":\"Student R\",\"3\":\"X\",\"4\":\"21\",\"5\":\"2\"},{\"1\":\"19\",\"2\":\"Student S\",\"3\":\"X\",\"4\":\"19\",\"5\":\"2\"},{\"1\":\"20\",\"2\":\"Student T\",\"3\":\"Z\",\"4\":\"35\",\"5\":\"4\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\r\n  \r\n\r\nIf we are sourcing data from a database, it is probable that you would see these 2 levels of data in 2 separate tables/views, but most business users are comfortable with MS Excel and want all the data in one sheet!!\r\nSo the data actually looks something like this.\r\n\r\n\r\ncombined_df <- left_join(course, student, by = \"course_id\")\r\n\r\npaged_table(combined_df)\r\n\r\n\r\n\r\n\r\n{\"columns\":[{\"label\":[\"course_id\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"course_name\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"start_date\"],\"name\":[3],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"end_date\"],\"name\":[4],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"s_id\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"s_name\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"gender\"],\"name\":[7],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"age\"],\"name\":[8],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"Course A\",\"3\":\"2021-01-01\",\"4\":\"2021-01-31\",\"5\":\"4\",\"6\":\"Student D\",\"7\":\"X\",\"8\":\"22\"},{\"1\":\"1\",\"2\":\"Course A\",\"3\":\"2021-01-01\",\"4\":\"2021-01-31\",\"5\":\"5\",\"6\":\"Student E\",\"7\":\"Y\",\"8\":\"19\"},{\"1\":\"1\",\"2\":\"Course A\",\"3\":\"2021-01-01\",\"4\":\"2021-01-31\",\"5\":\"14\",\"6\":\"Student N\",\"7\":\"Y\",\"8\":\"21\"},{\"1\":\"2\",\"2\":\"Course B\",\"3\":\"2021-02-01\",\"4\":\"2021-02-28\",\"5\":\"6\",\"6\":\"Student F\",\"7\":\"Y\",\"8\":\"25\"},{\"1\":\"2\",\"2\":\"Course B\",\"3\":\"2021-02-01\",\"4\":\"2021-02-28\",\"5\":\"7\",\"6\":\"Student G\",\"7\":\"Y\",\"8\":\"20\"},{\"1\":\"2\",\"2\":\"Course B\",\"3\":\"2021-02-01\",\"4\":\"2021-02-28\",\"5\":\"8\",\"6\":\"Student H\",\"7\":\"X\",\"8\":\"18\"},{\"1\":\"2\",\"2\":\"Course B\",\"3\":\"2021-02-01\",\"4\":\"2021-02-28\",\"5\":\"9\",\"6\":\"Student I\",\"7\":\"Z\",\"8\":\"27\"},{\"1\":\"2\",\"2\":\"Course B\",\"3\":\"2021-02-01\",\"4\":\"2021-02-28\",\"5\":\"10\",\"6\":\"Student J\",\"7\":\"Z\",\"8\":\"28\"},{\"1\":\"2\",\"2\":\"Course B\",\"3\":\"2021-02-01\",\"4\":\"2021-02-28\",\"5\":\"13\",\"6\":\"Student M\",\"7\":\"Y\",\"8\":\"21\"},{\"1\":\"2\",\"2\":\"Course B\",\"3\":\"2021-02-01\",\"4\":\"2021-02-28\",\"5\":\"15\",\"6\":\"Student O\",\"7\":\"Y\",\"8\":\"35\"},{\"1\":\"2\",\"2\":\"Course B\",\"3\":\"2021-02-01\",\"4\":\"2021-02-28\",\"5\":\"17\",\"6\":\"Student Q\",\"7\":\"Z\",\"8\":\"22\"},{\"1\":\"2\",\"2\":\"Course B\",\"3\":\"2021-02-01\",\"4\":\"2021-02-28\",\"5\":\"18\",\"6\":\"Student R\",\"7\":\"X\",\"8\":\"21\"},{\"1\":\"2\",\"2\":\"Course B\",\"3\":\"2021-02-01\",\"4\":\"2021-02-28\",\"5\":\"19\",\"6\":\"Student S\",\"7\":\"X\",\"8\":\"19\"},{\"1\":\"3\",\"2\":\"Course C\",\"3\":\"2021-03-01\",\"4\":\"2021-03-31\",\"5\":\"1\",\"6\":\"Student A\",\"7\":\"X\",\"8\":\"21\"},{\"1\":\"3\",\"2\":\"Course C\",\"3\":\"2021-03-01\",\"4\":\"2021-03-31\",\"5\":\"3\",\"6\":\"Student C\",\"7\":\"X\",\"8\":\"30\"},{\"1\":\"3\",\"2\":\"Course C\",\"3\":\"2021-03-01\",\"4\":\"2021-03-31\",\"5\":\"12\",\"6\":\"Student L\",\"7\":\"X\",\"8\":\"25\"},{\"1\":\"3\",\"2\":\"Course C\",\"3\":\"2021-03-01\",\"4\":\"2021-03-31\",\"5\":\"16\",\"6\":\"Student P\",\"7\":\"Z\",\"8\":\"30\"},{\"1\":\"4\",\"2\":\"Course D\",\"3\":\"2021-04-01\",\"4\":\"2021-04-30\",\"5\":\"2\",\"6\":\"Student B\",\"7\":\"X\",\"8\":\"22\"},{\"1\":\"4\",\"2\":\"Course D\",\"3\":\"2021-04-01\",\"4\":\"2021-04-30\",\"5\":\"11\",\"6\":\"Student K\",\"7\":\"X\",\"8\":\"32\"},{\"1\":\"4\",\"2\":\"Course D\",\"3\":\"2021-04-01\",\"4\":\"2021-04-30\",\"5\":\"20\",\"6\":\"Student T\",\"7\":\"Z\",\"8\":\"35\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\r\n  \r\n\r\nDisplaying such data in a table causes all the top-level data fields to repeat for every second-level record. You can see that course_id, course_name, start_date and end_date columns repeat for all students who enrolled in the same course. Take a moment to think about how would you display such data in an interactive table in a web page, HTML report or Shiny app.\r\nIt is advisable to split such denormalized data into normalized data i.e.Â create the original top-level and second level tables from the combined_df.\r\nVanilla reactable\r\nOne of my favorite R packages is {reactable}. The default output creates a neat interactive table with pagination (if data has more than 10 rows) and ability to sort columns.\r\n\r\n\r\nlibrary(reactable, quietly = TRUE, warn.conflicts = FALSE)\r\n\r\nreactable(data = combined_df)\r\n\r\n\r\n\r\n{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"course_id\":[1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,4,4,4],\"course_name\":[\"Course A\",\"Course A\",\"Course A\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course C\",\"Course C\",\"Course C\",\"Course C\",\"Course D\",\"Course D\",\"Course D\"],\"start_date\":[\"2021-01-01\",\"2021-01-01\",\"2021-01-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-03-01\",\"2021-03-01\",\"2021-03-01\",\"2021-03-01\",\"2021-04-01\",\"2021-04-01\",\"2021-04-01\"],\"end_date\":[\"2021-01-31\",\"2021-01-31\",\"2021-01-31\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-03-31\",\"2021-03-31\",\"2021-03-31\",\"2021-03-31\",\"2021-04-30\",\"2021-04-30\",\"2021-04-30\"],\"s_id\":[4,5,14,6,7,8,9,10,13,15,17,18,19,1,3,12,16,2,11,20],\"s_name\":[\"Student D\",\"Student E\",\"Student N\",\"Student F\",\"Student G\",\"Student H\",\"Student I\",\"Student J\",\"Student M\",\"Student O\",\"Student Q\",\"Student R\",\"Student S\",\"Student A\",\"Student C\",\"Student L\",\"Student P\",\"Student B\",\"Student K\",\"Student T\"],\"gender\":[\"X\",\"Y\",\"Y\",\"Y\",\"Y\",\"X\",\"Z\",\"Z\",\"Y\",\"Y\",\"Z\",\"X\",\"X\",\"X\",\"X\",\"X\",\"Z\",\"X\",\"X\",\"Z\"],\"age\":[22,19,21,25,20,18,27,28,21,35,22,21,19,21,30,25,30,22,32,35]},\"columns\":[{\"accessor\":\"course_id\",\"name\":\"course_id\",\"type\":\"numeric\"},{\"accessor\":\"course_name\",\"name\":\"course_name\",\"type\":\"character\"},{\"accessor\":\"start_date\",\"name\":\"start_date\",\"type\":\"Date\"},{\"accessor\":\"end_date\",\"name\":\"end_date\",\"type\":\"Date\"},{\"accessor\":\"s_id\",\"name\":\"s_id\",\"type\":\"numeric\"},{\"accessor\":\"s_name\",\"name\":\"s_name\",\"type\":\"character\"},{\"accessor\":\"gender\",\"name\":\"gender\",\"type\":\"character\"},{\"accessor\":\"age\",\"name\":\"age\",\"type\":\"numeric\"}],\"defaultPageSize\":10,\"paginationType\":\"numbers\",\"showPageInfo\":true,\"minRows\":1,\"dataKey\":\"413c1f3c101a174f7070712d78c69feb\",\"key\":\"413c1f3c101a174f7070712d78c69feb\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}\r\nBasic Formatting\r\nWith some additional tweaks, we can make it look better.\r\n\r\n\r\nreactable(\r\n  data       = combined_df,\r\n  compact    = TRUE, # for minimum row height\r\n  filterable = TRUE, # for individual column filters\r\n  striped    = TRUE, # banded rows\r\n  resizable  = TRUE, # for resizable column widths\r\n  columns    = list( # define custom header name, width, alignment etc.\r\n    course_id   = colDef(name = \"CID\",         width = 50,  align = \"center\"),\r\n    course_name = colDef(name = \"Course Name\", width = 140),\r\n    start_date  = colDef(name = \"Start Date\",  width = 120, align = \"center\"),\r\n    end_date    = colDef(name = \"End Date\",    width = 120, align = \"center\"),\r\n    s_id        = colDef(name = \"SID\",         width = 70,  align = \"center\"),\r\n    s_name      = colDef(name = \"Student Name\"),\r\n    gender      = colDef(name = \"Gender\",      width = 80,  align = \"center\"),\r\n    age         = colDef(name = \"Age\",         width = 50)\r\n  )\r\n)\r\n\r\n\r\n\r\n{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"course_id\":[1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,4,4,4],\"course_name\":[\"Course A\",\"Course A\",\"Course A\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course C\",\"Course C\",\"Course C\",\"Course C\",\"Course D\",\"Course D\",\"Course D\"],\"start_date\":[\"2021-01-01\",\"2021-01-01\",\"2021-01-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-03-01\",\"2021-03-01\",\"2021-03-01\",\"2021-03-01\",\"2021-04-01\",\"2021-04-01\",\"2021-04-01\"],\"end_date\":[\"2021-01-31\",\"2021-01-31\",\"2021-01-31\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-03-31\",\"2021-03-31\",\"2021-03-31\",\"2021-03-31\",\"2021-04-30\",\"2021-04-30\",\"2021-04-30\"],\"s_id\":[4,5,14,6,7,8,9,10,13,15,17,18,19,1,3,12,16,2,11,20],\"s_name\":[\"Student D\",\"Student E\",\"Student N\",\"Student F\",\"Student G\",\"Student H\",\"Student I\",\"Student J\",\"Student M\",\"Student O\",\"Student Q\",\"Student R\",\"Student S\",\"Student A\",\"Student C\",\"Student L\",\"Student P\",\"Student B\",\"Student K\",\"Student T\"],\"gender\":[\"X\",\"Y\",\"Y\",\"Y\",\"Y\",\"X\",\"Z\",\"Z\",\"Y\",\"Y\",\"Z\",\"X\",\"X\",\"X\",\"X\",\"X\",\"Z\",\"X\",\"X\",\"Z\"],\"age\":[22,19,21,25,20,18,27,28,21,35,22,21,19,21,30,25,30,22,32,35]},\"columns\":[{\"accessor\":\"course_id\",\"name\":\"CID\",\"type\":\"numeric\",\"width\":50,\"align\":\"center\"},{\"accessor\":\"course_name\",\"name\":\"Course Name\",\"type\":\"character\",\"width\":140},{\"accessor\":\"start_date\",\"name\":\"Start Date\",\"type\":\"Date\",\"width\":120,\"align\":\"center\"},{\"accessor\":\"end_date\",\"name\":\"End Date\",\"type\":\"Date\",\"width\":120,\"align\":\"center\"},{\"accessor\":\"s_id\",\"name\":\"SID\",\"type\":\"numeric\",\"width\":70,\"align\":\"center\"},{\"accessor\":\"s_name\",\"name\":\"Student Name\",\"type\":\"character\"},{\"accessor\":\"gender\",\"name\":\"Gender\",\"type\":\"character\",\"width\":80,\"align\":\"center\"},{\"accessor\":\"age\",\"name\":\"Age\",\"type\":\"numeric\",\"width\":50}],\"resizable\":true,\"filterable\":true,\"defaultPageSize\":10,\"paginationType\":\"numbers\",\"showPageInfo\":true,\"minRows\":1,\"striped\":true,\"compact\":true,\"dataKey\":\"37ac57f783425a81c3f289334adfb3a2\",\"key\":\"37ac57f783425a81c3f289334adfb3a2\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}\r\nHowever, the problem of repeating top-level fields still persists.\r\nGrouping and Aggregating\r\n{reactable} has a groupBy argument which lets us combined rows with common data fields and the aggregate argument inside colDef lets us define what aggregation to be used for each column of the top-level data.\r\n\r\n\r\nreactable(\r\n  data       = combined_df,\r\n  compact    = TRUE, # for minimum row height\r\n  filterable = TRUE, # for individual column filters\r\n  striped    = TRUE, # banded rows\r\n  resizable  = TRUE, # for resizable column widths\r\n  groupBy    = \"course_id\",\r\n  columns    = list(\r\n    # show count of students in each course\r\n    course_id   = colDef(name = \"CID\",         width = 100,  align = \"left\",    aggregate = \"count\"),  \r\n    # show unique course name\r\n    course_name = colDef(name = \"Course Name\", width = 140,                     aggregate = \"unique\"), \r\n    # show unique start date\r\n    start_date  = colDef(name = \"Start Date\",  width = 120,  align = \"center\",  aggregate = \"unique\"), \r\n    # show unique end date\r\n    end_date    = colDef(name = \"End Date\",    width = 120,  align = \"center\",  aggregate = \"unique\"), \r\n    s_id        = colDef(name = \"SID\",         width = 70,   align = \"center\"),\r\n    s_name      = colDef(name = \"Student Name\"),\r\n    gender      = colDef(name = \"Gender\",      width = 80,   align = \"center\"),\r\n    age         = colDef(name = \"Age\",         width = 50)\r\n  )\r\n)\r\n\r\n\r\n\r\n{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"course_id\":[1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,4,4,4],\"course_name\":[\"Course A\",\"Course A\",\"Course A\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course C\",\"Course C\",\"Course C\",\"Course C\",\"Course D\",\"Course D\",\"Course D\"],\"start_date\":[\"2021-01-01\",\"2021-01-01\",\"2021-01-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-03-01\",\"2021-03-01\",\"2021-03-01\",\"2021-03-01\",\"2021-04-01\",\"2021-04-01\",\"2021-04-01\"],\"end_date\":[\"2021-01-31\",\"2021-01-31\",\"2021-01-31\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-03-31\",\"2021-03-31\",\"2021-03-31\",\"2021-03-31\",\"2021-04-30\",\"2021-04-30\",\"2021-04-30\"],\"s_id\":[4,5,14,6,7,8,9,10,13,15,17,18,19,1,3,12,16,2,11,20],\"s_name\":[\"Student D\",\"Student E\",\"Student N\",\"Student F\",\"Student G\",\"Student H\",\"Student I\",\"Student J\",\"Student M\",\"Student O\",\"Student Q\",\"Student R\",\"Student S\",\"Student A\",\"Student C\",\"Student L\",\"Student P\",\"Student B\",\"Student K\",\"Student T\"],\"gender\":[\"X\",\"Y\",\"Y\",\"Y\",\"Y\",\"X\",\"Z\",\"Z\",\"Y\",\"Y\",\"Z\",\"X\",\"X\",\"X\",\"X\",\"X\",\"Z\",\"X\",\"X\",\"Z\"],\"age\":[22,19,21,25,20,18,27,28,21,35,22,21,19,21,30,25,30,22,32,35]},\"columns\":[{\"accessor\":\"course_id\",\"name\":\"CID\",\"type\":\"numeric\",\"aggregate\":\"count\",\"width\":100,\"align\":\"left\"},{\"accessor\":\"course_name\",\"name\":\"Course Name\",\"type\":\"character\",\"aggregate\":\"unique\",\"width\":140},{\"accessor\":\"start_date\",\"name\":\"Start Date\",\"type\":\"Date\",\"aggregate\":\"unique\",\"width\":120,\"align\":\"center\"},{\"accessor\":\"end_date\",\"name\":\"End Date\",\"type\":\"Date\",\"aggregate\":\"unique\",\"width\":120,\"align\":\"center\"},{\"accessor\":\"s_id\",\"name\":\"SID\",\"type\":\"numeric\",\"width\":70,\"align\":\"center\"},{\"accessor\":\"s_name\",\"name\":\"Student Name\",\"type\":\"character\"},{\"accessor\":\"gender\",\"name\":\"Gender\",\"type\":\"character\",\"width\":80,\"align\":\"center\"},{\"accessor\":\"age\",\"name\":\"Age\",\"type\":\"numeric\",\"width\":50}],\"pivotBy\":[\"course_id\"],\"resizable\":true,\"filterable\":true,\"defaultPageSize\":10,\"paginationType\":\"numbers\",\"showPageInfo\":true,\"minRows\":1,\"striped\":true,\"compact\":true,\"dataKey\":\"e9fc15f3a53a06ad3569f7b3f70a31cd\",\"key\":\"e9fc15f3a53a06ad3569f7b3f70a31cd\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}\r\nIn this case, all the columns which are not aggregated remain hidden. Clicking the little triangle in the CID column displays the hidden rows. Looks better, but again, the issue of duplicated data remains.\r\nYou can aggregate the second-level columns too, but this distorts the table and frankly, looks ugly. Here I aggregate the SID column in addition to all the other top-level columns.\r\n\r\n\r\nreactable(\r\n  data       = combined_df,\r\n  compact    = TRUE, # for minimum row height\r\n  filterable = TRUE, # for individual column filters\r\n  striped    = TRUE, # banded rows\r\n  resizable  = TRUE, # for resizable column widths\r\n  groupBy    = \"course_id\",\r\n  columns    = list(\r\n    course_id   = colDef(name = \"CID\",         width = 100,  align = \"left\",    aggregate = \"count\"),\r\n    course_name = colDef(name = \"Course Name\", width = 140,                     aggregate = \"unique\"),\r\n    start_date  = colDef(name = \"Start Date\",  width = 120,  align = \"center\",  aggregate = \"unique\"),\r\n    end_date    = colDef(name = \"End Date\",    width = 120,  align = \"center\",  aggregate = \"unique\"),\r\n    # YIKES!! Aggregating Student ID to show unique ids in each course.\r\n    s_id        = colDef(name = \"SID\",         width = 70,   align = \"center\",  aggregate = \"unique\"), \r\n    s_name      = colDef(name = \"Student Name\"),\r\n    gender      = colDef(name = \"Gender\",      width = 80,   align = \"center\"),\r\n    age         = colDef(name = \"Age\",         width = 50)\r\n  )\r\n)\r\n\r\n\r\n\r\n{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"course_id\":[1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,4,4,4],\"course_name\":[\"Course A\",\"Course A\",\"Course A\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course B\",\"Course C\",\"Course C\",\"Course C\",\"Course C\",\"Course D\",\"Course D\",\"Course D\"],\"start_date\":[\"2021-01-01\",\"2021-01-01\",\"2021-01-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-02-01\",\"2021-03-01\",\"2021-03-01\",\"2021-03-01\",\"2021-03-01\",\"2021-04-01\",\"2021-04-01\",\"2021-04-01\"],\"end_date\":[\"2021-01-31\",\"2021-01-31\",\"2021-01-31\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-02-28\",\"2021-03-31\",\"2021-03-31\",\"2021-03-31\",\"2021-03-31\",\"2021-04-30\",\"2021-04-30\",\"2021-04-30\"],\"s_id\":[4,5,14,6,7,8,9,10,13,15,17,18,19,1,3,12,16,2,11,20],\"s_name\":[\"Student D\",\"Student E\",\"Student N\",\"Student F\",\"Student G\",\"Student H\",\"Student I\",\"Student J\",\"Student M\",\"Student O\",\"Student Q\",\"Student R\",\"Student S\",\"Student A\",\"Student C\",\"Student L\",\"Student P\",\"Student B\",\"Student K\",\"Student T\"],\"gender\":[\"X\",\"Y\",\"Y\",\"Y\",\"Y\",\"X\",\"Z\",\"Z\",\"Y\",\"Y\",\"Z\",\"X\",\"X\",\"X\",\"X\",\"X\",\"Z\",\"X\",\"X\",\"Z\"],\"age\":[22,19,21,25,20,18,27,28,21,35,22,21,19,21,30,25,30,22,32,35]},\"columns\":[{\"accessor\":\"course_id\",\"name\":\"CID\",\"type\":\"numeric\",\"aggregate\":\"count\",\"width\":100,\"align\":\"left\"},{\"accessor\":\"course_name\",\"name\":\"Course Name\",\"type\":\"character\",\"aggregate\":\"unique\",\"width\":140},{\"accessor\":\"start_date\",\"name\":\"Start Date\",\"type\":\"Date\",\"aggregate\":\"unique\",\"width\":120,\"align\":\"center\"},{\"accessor\":\"end_date\",\"name\":\"End Date\",\"type\":\"Date\",\"aggregate\":\"unique\",\"width\":120,\"align\":\"center\"},{\"accessor\":\"s_id\",\"name\":\"SID\",\"type\":\"numeric\",\"aggregate\":\"unique\",\"width\":70,\"align\":\"center\"},{\"accessor\":\"s_name\",\"name\":\"Student Name\",\"type\":\"character\"},{\"accessor\":\"gender\",\"name\":\"Gender\",\"type\":\"character\",\"width\":80,\"align\":\"center\"},{\"accessor\":\"age\",\"name\":\"Age\",\"type\":\"numeric\",\"width\":50}],\"pivotBy\":[\"course_id\"],\"resizable\":true,\"filterable\":true,\"defaultPageSize\":10,\"paginationType\":\"numbers\",\"showPageInfo\":true,\"minRows\":1,\"striped\":true,\"compact\":true,\"dataKey\":\"51a6dfecd993aea3dbb11e027155fa81\",\"key\":\"51a6dfecd993aea3dbb11e027155fa81\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}\r\nWouldnât it be nice if we could display only the top-level columns by default and on clicking the small triangle for a row, show all the second-level columns corresponding to that row only, like a drill-down table?\r\nTo do this we need 2 separate tables. Earlier in this post, I said it is advisable to split such denormalized data into normalized data i.e.Â create the original top-level and second level tables from the combined_df. Letâs recreate the 2 tables.\r\nI want to demonstrate how we go from the combined data to the 2 tables. Hence I will not use the course and student tables created earlier.\r\nCreating the top_level table using just the columns in course. Letâs also create a new column n_students depicting count of students in each course.\r\n\r\n\r\ntop_level <- combined_df %>% \r\n  # Only course info columns\r\n  count(course_id, course_name, start_date, end_date, name = \"n_students\") \r\n\r\npaged_table(top_level)\r\n\r\n\r\n\r\n\r\n{\"columns\":[{\"label\":[\"course_id\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"course_name\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"start_date\"],\"name\":[3],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"end_date\"],\"name\":[4],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"n_students\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"Course A\",\"3\":\"2021-01-01\",\"4\":\"2021-01-31\",\"5\":\"3\"},{\"1\":\"2\",\"2\":\"Course B\",\"3\":\"2021-02-01\",\"4\":\"2021-02-28\",\"5\":\"10\"},{\"1\":\"3\",\"2\":\"Course C\",\"3\":\"2021-03-01\",\"4\":\"2021-03-31\",\"5\":\"4\"},{\"1\":\"4\",\"2\":\"Course D\",\"3\":\"2021-04-01\",\"4\":\"2021-04-30\",\"5\":\"3\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\r\n  \r\n\r\n\r\n\r\nsecond_level <- combined_df %>% \r\n  # Only Student info columns with unique identifier for Course\r\n  select(course_id, s_id, s_name, gender, age) %>% \r\n  arrange(s_id)\r\n\r\npaged_table(second_level)\r\n\r\n\r\n\r\n\r\n{\"columns\":[{\"label\":[\"course_id\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"s_id\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"s_name\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"gender\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"age\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"3\",\"2\":\"1\",\"3\":\"Student A\",\"4\":\"X\",\"5\":\"21\"},{\"1\":\"4\",\"2\":\"2\",\"3\":\"Student B\",\"4\":\"X\",\"5\":\"22\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"Student C\",\"4\":\"X\",\"5\":\"30\"},{\"1\":\"1\",\"2\":\"4\",\"3\":\"Student D\",\"4\":\"X\",\"5\":\"22\"},{\"1\":\"1\",\"2\":\"5\",\"3\":\"Student E\",\"4\":\"Y\",\"5\":\"19\"},{\"1\":\"2\",\"2\":\"6\",\"3\":\"Student F\",\"4\":\"Y\",\"5\":\"25\"},{\"1\":\"2\",\"2\":\"7\",\"3\":\"Student G\",\"4\":\"Y\",\"5\":\"20\"},{\"1\":\"2\",\"2\":\"8\",\"3\":\"Student H\",\"4\":\"X\",\"5\":\"18\"},{\"1\":\"2\",\"2\":\"9\",\"3\":\"Student I\",\"4\":\"Z\",\"5\":\"27\"},{\"1\":\"2\",\"2\":\"10\",\"3\":\"Student J\",\"4\":\"Z\",\"5\":\"28\"},{\"1\":\"4\",\"2\":\"11\",\"3\":\"Student K\",\"4\":\"X\",\"5\":\"32\"},{\"1\":\"3\",\"2\":\"12\",\"3\":\"Student L\",\"4\":\"X\",\"5\":\"25\"},{\"1\":\"2\",\"2\":\"13\",\"3\":\"Student M\",\"4\":\"Y\",\"5\":\"21\"},{\"1\":\"1\",\"2\":\"14\",\"3\":\"Student N\",\"4\":\"Y\",\"5\":\"21\"},{\"1\":\"2\",\"2\":\"15\",\"3\":\"Student O\",\"4\":\"Y\",\"5\":\"35\"},{\"1\":\"3\",\"2\":\"16\",\"3\":\"Student P\",\"4\":\"Z\",\"5\":\"30\"},{\"1\":\"2\",\"2\":\"17\",\"3\":\"Student Q\",\"4\":\"Z\",\"5\":\"22\"},{\"1\":\"2\",\"2\":\"18\",\"3\":\"Student R\",\"4\":\"X\",\"5\":\"21\"},{\"1\":\"2\",\"2\":\"19\",\"3\":\"Student S\",\"4\":\"X\",\"5\":\"19\"},{\"1\":\"4\",\"2\":\"20\",\"3\":\"Student T\",\"4\":\"Z\",\"5\":\"35\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\r\n  \r\n\r\nThe final Drill-down Table\r\nNow that we have the 2 tables ready, let us now create the final {reactable}. The trick here is to use the details argument to which we pass another {reactable} of just the rows with students data corresponding to given course.\r\n\r\n\r\nreactable(\r\n  data       = top_level,\r\n  compact    = TRUE, # for minimum row height\r\n  filterable = TRUE, # for individual column filters\r\n  striped    = TRUE, # banded rows\r\n  resizable  = TRUE, # for resizable column widths\r\n  columns    = list(\r\n    course_id   = colDef(name = \"CID\",             width = 50,  align = \"center\"),\r\n    course_name = colDef(name = \"Course Name\"), \r\n    start_date  = colDef(name = \"Start Date\",      width = 120, align = \"center\"),\r\n    end_date    = colDef(name = \"End Date\",        width = 120, align = \"center\"),\r\n    n_students  = colDef(name = \"No. of Students\", width = 130, align = \"center\")\r\n  ),\r\n  details = function(index) { # index is the row number of current row.\r\n    # sub-table of only those students for current row.\r\n    sec_lvl = second_level[second_level$course_id == top_level$course_id[index], ] \r\n    reactable(data       = sec_lvl,\r\n              compact    = TRUE, \r\n              filterable = TRUE,\r\n              bordered   = TRUE, \r\n              resizable  = TRUE,\r\n              columns    = list(\r\n                course_id   = colDef(show = FALSE), # hide the course id column\r\n                s_id        = colDef(name = \"SID\",    width = 70, align = \"center\"),\r\n                s_name      = colDef(name = \"Student Name\"),\r\n                gender      = colDef(name = \"Gender\", width = 90, align = \"center\"),\r\n                age         = colDef(name = \"Age\",    width = 50, align = \"center\")\r\n              )\r\n              )\r\n  }\r\n)\r\n\r\n\r\n\r\n{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"course_id\":[1,2,3,4],\"course_name\":[\"Course A\",\"Course B\",\"Course C\",\"Course D\"],\"start_date\":[\"2021-01-01\",\"2021-02-01\",\"2021-03-01\",\"2021-04-01\"],\"end_date\":[\"2021-01-31\",\"2021-02-28\",\"2021-03-31\",\"2021-04-30\"],\"n_students\":[3,10,4,3]},\"columns\":[{\"accessor\":\".details\",\"name\":\"\",\"type\":\"NULL\",\"sortable\":false,\"resizable\":false,\"filterable\":false,\"width\":45,\"align\":\"center\",\"details\":[{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"course_id\":[1,1,1],\"s_id\":[4,5,14],\"s_name\":[\"Student D\",\"Student E\",\"Student N\"],\"gender\":[\"X\",\"Y\",\"Y\"],\"age\":[22,19,21]},\"columns\":[{\"accessor\":\"course_id\",\"name\":\"course_id\",\"type\":\"numeric\",\"show\":false},{\"accessor\":\"s_id\",\"name\":\"SID\",\"type\":\"numeric\",\"width\":70,\"align\":\"center\"},{\"accessor\":\"s_name\",\"name\":\"Student Name\",\"type\":\"character\"},{\"accessor\":\"gender\",\"name\":\"Gender\",\"type\":\"character\",\"width\":90,\"align\":\"center\"},{\"accessor\":\"age\",\"name\":\"Age\",\"type\":\"numeric\",\"width\":50,\"align\":\"center\"}],\"resizable\":true,\"filterable\":true,\"defaultPageSize\":10,\"paginationType\":\"numbers\",\"showPageInfo\":true,\"minRows\":1,\"bordered\":true,\"compact\":true,\"dataKey\":\"12036566002706ab50f66831a92eae32\",\"key\":\"12036566002706ab50f66831a92eae32\",\"nested\":true},\"children\":[]},{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"course_id\":[2,2,2,2,2,2,2,2,2,2],\"s_id\":[6,7,8,9,10,13,15,17,18,19],\"s_name\":[\"Student F\",\"Student G\",\"Student H\",\"Student I\",\"Student J\",\"Student M\",\"Student O\",\"Student Q\",\"Student R\",\"Student S\"],\"gender\":[\"Y\",\"Y\",\"X\",\"Z\",\"Z\",\"Y\",\"Y\",\"Z\",\"X\",\"X\"],\"age\":[25,20,18,27,28,21,35,22,21,19]},\"columns\":[{\"accessor\":\"course_id\",\"name\":\"course_id\",\"type\":\"numeric\",\"show\":false},{\"accessor\":\"s_id\",\"name\":\"SID\",\"type\":\"numeric\",\"width\":70,\"align\":\"center\"},{\"accessor\":\"s_name\",\"name\":\"Student Name\",\"type\":\"character\"},{\"accessor\":\"gender\",\"name\":\"Gender\",\"type\":\"character\",\"width\":90,\"align\":\"center\"},{\"accessor\":\"age\",\"name\":\"Age\",\"type\":\"numeric\",\"width\":50,\"align\":\"center\"}],\"resizable\":true,\"filterable\":true,\"defaultPageSize\":10,\"paginationType\":\"numbers\",\"showPageInfo\":true,\"minRows\":1,\"bordered\":true,\"compact\":true,\"dataKey\":\"6587f2ad3dcb0fcc5216bf4473c986a0\",\"key\":\"6587f2ad3dcb0fcc5216bf4473c986a0\",\"nested\":true},\"children\":[]},{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"course_id\":[3,3,3,3],\"s_id\":[1,3,12,16],\"s_name\":[\"Student A\",\"Student C\",\"Student L\",\"Student P\"],\"gender\":[\"X\",\"X\",\"X\",\"Z\"],\"age\":[21,30,25,30]},\"columns\":[{\"accessor\":\"course_id\",\"name\":\"course_id\",\"type\":\"numeric\",\"show\":false},{\"accessor\":\"s_id\",\"name\":\"SID\",\"type\":\"numeric\",\"width\":70,\"align\":\"center\"},{\"accessor\":\"s_name\",\"name\":\"Student Name\",\"type\":\"character\"},{\"accessor\":\"gender\",\"name\":\"Gender\",\"type\":\"character\",\"width\":90,\"align\":\"center\"},{\"accessor\":\"age\",\"name\":\"Age\",\"type\":\"numeric\",\"width\":50,\"align\":\"center\"}],\"resizable\":true,\"filterable\":true,\"defaultPageSize\":10,\"paginationType\":\"numbers\",\"showPageInfo\":true,\"minRows\":1,\"bordered\":true,\"compact\":true,\"dataKey\":\"e3963514a17cdadfff8af46fde214632\",\"key\":\"e3963514a17cdadfff8af46fde214632\",\"nested\":true},\"children\":[]},{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"course_id\":[4,4,4],\"s_id\":[2,11,20],\"s_name\":[\"Student B\",\"Student K\",\"Student T\"],\"gender\":[\"X\",\"X\",\"Z\"],\"age\":[22,32,35]},\"columns\":[{\"accessor\":\"course_id\",\"name\":\"course_id\",\"type\":\"numeric\",\"show\":false},{\"accessor\":\"s_id\",\"name\":\"SID\",\"type\":\"numeric\",\"width\":70,\"align\":\"center\"},{\"accessor\":\"s_name\",\"name\":\"Student Name\",\"type\":\"character\"},{\"accessor\":\"gender\",\"name\":\"Gender\",\"type\":\"character\",\"width\":90,\"align\":\"center\"},{\"accessor\":\"age\",\"name\":\"Age\",\"type\":\"numeric\",\"width\":50,\"align\":\"center\"}],\"resizable\":true,\"filterable\":true,\"defaultPageSize\":10,\"paginationType\":\"numbers\",\"showPageInfo\":true,\"minRows\":1,\"bordered\":true,\"compact\":true,\"dataKey\":\"5a3a2a276df6d52409d68b95331871bb\",\"key\":\"5a3a2a276df6d52409d68b95331871bb\",\"nested\":true},\"children\":[]}]},{\"accessor\":\"course_id\",\"name\":\"CID\",\"type\":\"numeric\",\"width\":50,\"align\":\"center\"},{\"accessor\":\"course_name\",\"name\":\"Course Name\",\"type\":\"character\"},{\"accessor\":\"start_date\",\"name\":\"Start Date\",\"type\":\"Date\",\"width\":120,\"align\":\"center\"},{\"accessor\":\"end_date\",\"name\":\"End Date\",\"type\":\"Date\",\"width\":120,\"align\":\"center\"},{\"accessor\":\"n_students\",\"name\":\"No. of Students\",\"type\":\"numeric\",\"width\":130,\"align\":\"center\"}],\"resizable\":true,\"filterable\":true,\"defaultPageSize\":10,\"paginationType\":\"numbers\",\"showPageInfo\":true,\"minRows\":1,\"striped\":true,\"compact\":true,\"dataKey\":\"3be6d4b7204585a544def72d52d37613\",\"key\":\"3be6d4b7204585a544def72d52d37613\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}\r\nSince the sub-table is also a {reactable}, you can go another level downâ¦ and another, but please do consider the usability aspect of this feature before taking that decision. I havenât tried going beyond 2 levels of data myself. Maybe a part 2 to this post??\r\nConclusion\r\nDrill-down tables let you pack a lot of data in a compact manner and allow use by multiple audiences interested in varying degrees/levels of information. {reactable} can help create an interactive data table from tabular data with sorting and pagination by default. The data table is an HTML widget that can be used in R Markdown documents and Shiny applications, or viewed from an R console. A lot of features can be enabled/disabled using the basic arguments of the reactable() function and much more using custom JavaScript.\r\nReferences & Citations\r\nGreg Lin (2020). reactable: Interactive Data Tables Based on âReact Tableâ. R package version 0.2.3. https://CRAN.R-project.org/package=reactable\r\n\r\n\r\n\r\n",
    "preview": "https://i.imgur.com/Zzk5SWf.gif",
    "last_modified": "2021-07-28T01:03:48+05:30",
    "input_file": {}
  },
  {
    "path": "posts/2021-07-17-programmingwithdplyr/",
    "title": "Programming with R {dplyr} - As I Understand It!!",
    "description": "How to create your own functions using {dplyr}",
    "author": [
      {
        "name": "Vishal Katti",
        "url": {}
      }
    ],
    "date": "2021-07-17",
    "categories": [
      "Rstats",
      "dplyr",
      "functions"
    ],
    "contents": "\r\n\r\nContents\r\nIntroduction\r\nInspiration\r\nData\r\n\r\nselect()\r\nPassing raw column names\r\nPassing multiple raw column names using â¦ argument\r\nPassing a character vector of column names\r\n\r\nfilter()\r\nPassing single raw criteria\r\nPassing multiple raw criteria using â¦ argument\r\nPassing single criteria as a character string\r\nPassing multiple criteria as character vector\r\n\r\nmutate()\r\nPassing the column name as raw name\r\nPassing the new variable name as character string (direct)\r\nPassing the new variable name as character string (indirect)\r\n\r\narrange()\r\nPassing single raw name\r\nPassing multiple raw names using ... argument\r\nPass single column name as string\r\nPass multiple column name as string\r\n\r\ngroup_by()\r\nPassing single raw name\r\nPassing multiple raw names using the ... operator\r\nPassing single or multiple column names as character string\r\n\r\n(Slightly Better) Examples\r\nmutate() example\r\ngroup_by() example\r\nMore ideas\r\n\r\nConclusion\r\nReferences\r\n\r\n\r\nd-article div.sourceCode code,\r\nd-article pre code {\r\n    font-family: \"Fira Code\", monospace;\r\n}\r\nIntroduction\r\nThe purpose of this document is to act as a quick guide for myself and others to understand how to use dplyr effectively to create dynamic functions. The general assumption is that the reader is familiar with the {dplyr} package and how to use it for data wrangling.\r\nIn this document, we will explore how to create functions using the popular dplyr verbs like select, filter, mutate, arrange and finally group_by with summarise.\r\nInspiration\r\nI regularly deal with event-related information with event date and few other columns like event type, root cause etc. Most reports usually involve calculating number of events that took place on a monthly, quarterly or annual basis, sometimes split by event type, root cause and other columns. After a few reports I realized that I am basically writing the same code over and over again to calculate these KPIs. Keeping the DRY (Don't Repeat Yourself) principle in mind, I managed to write a few functions to calculate these KPIs with a few dynamic variables. Following is an attempt to articulate what I learnt while creating those functions.\r\nData\r\nWe shall use the Texas Housing Sales data, available as a tibble in the popular ggplot2 package as reference data. It contains monthly information about the housing market in Texas provided by the TAMU real estate center, https://www.recenter.tamu.edu/. It has 8602 observations and 9 variables.\r\n\r\n\r\ntxhousing <- ggplot2::txhousing\r\ndplyr::glimpse(txhousing)\r\n\r\n\r\nRows: 8,602\r\nColumns: 9\r\n$ city      <chr> \"Abilene\", \"Abilene\", \"Abilene\", \"Abilene\", \"Abile~\r\n$ year      <int> 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 20~\r\n$ month     <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4,~\r\n$ sales     <dbl> 72, 98, 130, 98, 141, 156, 152, 131, 104, 101, 100~\r\n$ volume    <dbl> 5380000, 6505000, 9285000, 9730000, 10590000, 1391~\r\n$ median    <dbl> 71400, 58700, 58100, 68600, 67300, 66900, 73500, 7~\r\n$ listings  <dbl> 701, 746, 784, 785, 794, 780, 742, 765, 771, 764, ~\r\n$ inventory <dbl> 6.3, 6.6, 6.8, 6.9, 6.8, 6.6, 6.2, 6.4, 6.5, 6.6, ~\r\n$ date      <dbl> 2000.000, 2000.083, 2000.167, 2000.250, 2000.333, ~\r\n\r\nWe shall refer the above data in all the following sections.\r\nselect()\r\nWhen using dplyr functions, the two most popular ways to pass column names is either as bare names i.e.Â column names without enclosing them in quotes like sales or volume OR pass them as a character string like âsalesâ or âvolumeâ. You could also pass a character vector like c(\"sales\", \"volume\"). In this section we will explore the 3 ways to dynamically select the columns we want.\r\nPassing raw column names\r\nIn this method, we pass the raw name of the column we want to select and use the embrace of curly-curly brackets to pass the raw name. For multiple columns, we can pass the raw names as a single vector.\r\n\r\n\r\nselect_raw <- function(df, var) {\r\n  dplyr::select(.data = df, {{var}}) %>%     # embrace of curly-curly {{}} brackets\r\n    head()                                   # to limit the number of output rows in this example.\r\n}\r\nselect_raw(txhousing, sales)                 # pass single raw name\r\n\r\n\r\n# A tibble: 6 x 1\r\n  sales\r\n  <dbl>\r\n1    72\r\n2    98\r\n3   130\r\n4    98\r\n5   141\r\n6   156\r\n\r\nselect_raw(txhousing, c(sales, volume))      # pass a vector of raw names for multiple columns\r\n\r\n\r\n# A tibble: 6 x 2\r\n  sales   volume\r\n  <dbl>    <dbl>\r\n1    72  5380000\r\n2    98  6505000\r\n3   130  9285000\r\n4    98  9730000\r\n5   141 10590000\r\n6   156 13910000\r\n\r\nIf passing multiple raw names as vector as in the select_raw() feels like an unnecessary complication, try the next method.\r\nPassing multiple raw column names using â¦ argument\r\nIn this method, we use the â¦ argument to pass the raw names of the columns we want to select.\r\n\r\n\r\nmy_select <- function(df, ...) {\r\n  dplyr::select(.data = df, ...) %>% \r\n    head()\r\n}\r\n\r\nmy_select(txhousing, sales, volume)          # pass multiple raw names directly\r\n\r\n\r\n# A tibble: 6 x 2\r\n  sales   volume\r\n  <dbl>    <dbl>\r\n1    72  5380000\r\n2    98  6505000\r\n3   130  9285000\r\n4    98  9730000\r\n5   141 10590000\r\n6   156 13910000\r\n\r\nPassing a character vector of column names\r\nIf we have the column names as a character vector, we use the all_of function to pass the character vector to the internal select function.\r\n\r\n\r\nmy_select_char <- function(df, cols) {\r\n  dplyr::select(.data = df, dplyr::all_of(cols)) %>% \r\n    head()\r\n}\r\n\r\nmy_cols <- c(\"sales\",\"volume\")\r\nmy_select_char(txhousing, my_cols)\r\n\r\n\r\n# A tibble: 6 x 2\r\n  sales   volume\r\n  <dbl>    <dbl>\r\n1    72  5380000\r\n2    98  6505000\r\n3   130  9285000\r\n4    98  9730000\r\n5   141 10590000\r\n6   156 13910000\r\n\r\nfilter()\r\nIn the previous section, we passed column names either as bare names or character strings. filter() takes one or more expressions/conditions that result in a logical vector, with same length as number of rows in the data.frame/tibble and returns only those rows for which the expression/condition returns TRUE. Following are 2 ways to pass these logical expressions/conditions. Iâm using expression and condition interchangeably here. In this context, a condition is an expression that results in a boolean TRUE/FALSE result.\r\nPassing single raw criteria\r\nIn this method, we pass the condition sales > 8000 as a raw/bare expression.\r\n\r\n\r\nfilter_raw <- function(df, cond) {\r\n  dplyr::filter(.data = df, {{cond}})        # embrace of curly-curly {{}} brackets\r\n}\r\n\r\nfilter_raw(txhousing, sales > 8000)          # Pass a single raw criterion\r\n\r\n\r\n# A tibble: 10 x 9\r\n   city     year month sales    volume median listings inventory  date\r\n   <chr>   <int> <int> <dbl>     <dbl>  <dbl>    <dbl>     <dbl> <dbl>\r\n 1 Houston  2006     5  8040    1.60e9 151200    35398       5.5 2006.\r\n 2 Houston  2006     6  8628    1.80e9 155200    36281       5.6 2006.\r\n 3 Houston  2013     5  8439    2.12e9 186100    20526       3.3 2013.\r\n 4 Houston  2013     7  8468    2.17e9 187800    21497       3.3 2014.\r\n 5 Houston  2013     8  8155    2.08e9 186700    21366       3.3 2014.\r\n 6 Houston  2014     6  8391    2.34e9 211200    19725       2.9 2014.\r\n 7 Houston  2014     7  8391    2.28e9 199700    20214       3   2014.\r\n 8 Houston  2014     8  8167    2.20e9 202400    20007       2.9 2015.\r\n 9 Houston  2015     6  8449    2.49e9 222400    22311       3.2 2015.\r\n10 Houston  2015     7  8945    2.57e9 217600    23875       3.4 2016.\r\n\r\nDo you think we can pass multiple bare conditions as a vector, like we did for select_raw() in the previous section? Let us try passing multiple raw criteria as a vector.\r\n\r\n\r\nfilter_raw(txhousing, c(sales > 8000, year > 2010))\r\n\r\n\r\nError: Problem with `filter()` input `..1`.\r\ni Input `..1` is `c(sales > 8000, year > 2010)`.\r\nx Input `..1` must be of size 8602 or 1, not size 17204.\r\n\r\n\r\nPassing multiple raw criteria as a vector doesnât work like it works for select_raw() function. Let us understand why. Consider the following code:\r\n\r\n\r\nA <- c(TRUE, TRUE)                           # boolean vector of length = 2\r\nB <- c(FALSE, FALSE)                         # boolean vector of length = 2\r\nX <- c(A, B)\r\nX\r\n\r\n\r\n[1]  TRUE  TRUE FALSE FALSE\r\n\r\nNotice that length of X is 4. Similarly, sales > 8000 evaluates to a TRUE/FALSE boolean vector of length 8602 (equal to number of rows in txhousing) and so does year > 2010. So the vector c(sales > 8000, year > 2010) becomes a TRUE/FALSE boolean vector of length 17204, which results in an error.\r\nPassing multiple raw criteria using â¦ argument\r\nTo pass multiple raw criteria, we can use the ... argument.\r\n\r\n\r\nmy_filter <- function(df, ...) { \r\n  dplyr::filter(.data = df, ...)                # pass the dots argument\r\n  }\r\n\r\nmy_filter(txhousing, sales > 8000, year > 2010) # pass multiple raw criteria\r\n\r\n\r\n# A tibble: 8 x 9\r\n  city     year month sales     volume median listings inventory  date\r\n  <chr>   <int> <int> <dbl>      <dbl>  <dbl>    <dbl>     <dbl> <dbl>\r\n1 Houston  2013     5  8439 2121508529 186100    20526       3.3 2013.\r\n2 Houston  2013     7  8468 2168720825 187800    21497       3.3 2014.\r\n3 Houston  2013     8  8155 2083377894 186700    21366       3.3 2014.\r\n4 Houston  2014     6  8391 2342443127 211200    19725       2.9 2014.\r\n5 Houston  2014     7  8391 2278932511 199700    20214       3   2014.\r\n6 Houston  2014     8  8167 2195184825 202400    20007       2.9 2015.\r\n7 Houston  2015     6  8449 2490238594 222400    22311       3.2 2015.\r\n8 Houston  2015     7  8945 2568156780 217600    23875       3.4 2016.\r\n\r\nPassing single criteria as a character string\r\nBy default, dplyr::filter() does not accept conditions as character strings. Following is an example which results in error\r\n\r\n\r\ndplyr::filter(txhousing, \"sales > 8000\")\r\n\r\n\r\nError: Problem with `filter()` input `..1`.\r\ni Input `..1` is `\"sales > 8000\"`.\r\nx Input `..1` must be a logical vector, not a character.\r\n\r\n\r\nWe need to convert the character condition into a raw expression.\r\n\r\n\r\nmy_filter_string <- function(df, cond) {\r\n  dplyr::filter(.data = df, eval(parse(text = cond)))   # convert text to raw criterion\r\n}\r\n\r\nmy_filter_string(txhousing, \"sales > 8000\")             # pass single text string as criteria\r\n\r\n\r\n# A tibble: 10 x 9\r\n   city     year month sales    volume median listings inventory  date\r\n   <chr>   <int> <int> <dbl>     <dbl>  <dbl>    <dbl>     <dbl> <dbl>\r\n 1 Houston  2006     5  8040    1.60e9 151200    35398       5.5 2006.\r\n 2 Houston  2006     6  8628    1.80e9 155200    36281       5.6 2006.\r\n 3 Houston  2013     5  8439    2.12e9 186100    20526       3.3 2013.\r\n 4 Houston  2013     7  8468    2.17e9 187800    21497       3.3 2014.\r\n 5 Houston  2013     8  8155    2.08e9 186700    21366       3.3 2014.\r\n 6 Houston  2014     6  8391    2.34e9 211200    19725       2.9 2014.\r\n 7 Houston  2014     7  8391    2.28e9 199700    20214       3   2014.\r\n 8 Houston  2014     8  8167    2.20e9 202400    20007       2.9 2015.\r\n 9 Houston  2015     6  8449    2.49e9 222400    22311       3.2 2015.\r\n10 Houston  2015     7  8945    2.57e9 217600    23875       3.4 2016.\r\n\r\nThe special sauce here is the eval(parse(text = ...)) combo that converts the long text criteria into a single raw criteria and passes it to the internal filter() function.\r\nPassing multiple criteria as character vector\r\nWhat if want to pass multiple criteria as a string vector? In such a situation, we must combine all the string conditions into a single long string condition using paste0(..., collapse = \" & \"). The paste0(\"(\", cond, \")\", collapse = \" & \") combines all the criteria into a single long criteria, but still a text string.\r\n\r\n\r\nmy_filter_strings <- function(df, cond) { \r\n  filter_text <- paste0(\"(\", cond, \")\", collapse = \" & \")   # combine all criteria\r\n  message(\"Filter Condition: \", filter_text)                # (OPTIONAL) show the combined filter string\r\n  dplyr::filter(.data = df, eval(parse(text = filter_text)))# convert text to raw criterion\r\n  }\r\n\r\nmy_filter_criteria <- c(\"sales > 8000\", \"year > 2010\")\r\nmy_filter_strings(txhousing, my_filter_criteria)\r\n\r\n\r\n# A tibble: 8 x 9\r\n  city     year month sales     volume median listings inventory  date\r\n  <chr>   <int> <int> <dbl>      <dbl>  <dbl>    <dbl>     <dbl> <dbl>\r\n1 Houston  2013     5  8439 2121508529 186100    20526       3.3 2013.\r\n2 Houston  2013     7  8468 2168720825 187800    21497       3.3 2014.\r\n3 Houston  2013     8  8155 2083377894 186700    21366       3.3 2014.\r\n4 Houston  2014     6  8391 2342443127 211200    19725       2.9 2014.\r\n5 Houston  2014     7  8391 2278932511 199700    20214       3   2014.\r\n6 Houston  2014     8  8167 2195184825 202400    20007       2.9 2015.\r\n7 Houston  2015     6  8449 2490238594 222400    22311       3.2 2015.\r\n8 Houston  2015     7  8945 2568156780 217600    23875       3.4 2016.\r\n\r\n\r\n\r\nmy_filter_criteria_with_OR <- c(\"sales > 8000 | sales < 50\", \"year > 2010\")\r\n\r\n# NOTE: OR criteria must be a single string separated by pipe '|' as in example below.\r\nmy_filter_strings(txhousing, my_filter_criteria_with_OR)\r\n\r\n\r\n# A tibble: 315 x 9\r\n   city        year month sales volume median listings inventory  date\r\n   <chr>      <int> <int> <dbl>  <dbl>  <dbl>    <dbl>     <dbl> <dbl>\r\n 1 Brownsvil~  2011     1    48 4.97e6  83300      784      12.6 2011 \r\n 2 Brownsvil~  2011     2    47 5.56e6 101400      776      12.7 2011.\r\n 3 Brownsvil~  2011     7    47 4.81e6  91200      749      13.1 2012.\r\n 4 Brownsvil~  2011    12    39 4.20e6  86800      726      12.4 2012.\r\n 5 Brownsvil~  2012     1    43 3.89e6  85000      791      13.6 2012 \r\n 6 Brownsvil~  2012     3    27 2.98e6  93800      734      13.3 2012.\r\n 7 Brownsvil~  2012    11    41 5.12e6  99000      807      14   2013.\r\n 8 Brownsvil~  2013    11    38 4.82e6 108000      859      13.4 2014.\r\n 9 Brownsvil~  2015     1    41 5.40e6  97000      733      10.7 2015 \r\n10 Galveston   2011     1    43 8.88e6 170000     1015      13.7 2011 \r\n# ... with 305 more rows\r\n\r\nmutate()\r\nmutate() allows you to add new columns or modify existing columns. In the example below, we will create a new column volume_in_millions from the existing column volume. The names of both the columns can be passed to the function either as raw names or character strings.\r\nPassing the column name as raw name\r\n\r\n\r\nmutate_raw <- function(df, new_col_raw, old_col_raw, num = 1) { \r\n  dplyr::mutate(.data = df, {{new_col_raw}} := {{old_col_raw}}/num) %>% \r\n    head()\r\n}\r\n\r\ntxhousing %>% \r\n  select(city, year, month, volume) %>% \r\n  mutate_raw(vol_in_millions, volume, 1E6) # pass raw column names w/o quotes\r\n\r\n\r\n# A tibble: 6 x 5\r\n  city     year month   volume vol_in_millions\r\n  <chr>   <int> <int>    <dbl>           <dbl>\r\n1 Abilene  2000     1  5380000            5.38\r\n2 Abilene  2000     2  6505000            6.50\r\n3 Abilene  2000     3  9285000            9.28\r\n4 Abilene  2000     4  9730000            9.73\r\n5 Abilene  2000     5 10590000           10.6 \r\n6 Abilene  2000     6 13910000           13.9 \r\n\r\nPassing the new variable name as character string (direct)\r\n\r\n\r\nmutate_text <- function(df, new_col_str, old_col_str, num = 1) { \r\n  dplyr::mutate(.data = df, {{new_col_str}} := df[[old_col_str]]/num) %>% \r\n    head()\r\n}\r\n\r\ntxhousing %>% \r\n  select(city, year, month, volume) %>%\r\n  mutate_text(\"vol_in_millions\", \"volume\", 1E6) # pass column names as strings\r\n\r\n\r\n# A tibble: 6 x 5\r\n  city     year month   volume vol_in_millions\r\n  <chr>   <int> <int>    <dbl>           <dbl>\r\n1 Abilene  2000     1  5380000            5.38\r\n2 Abilene  2000     2  6505000            6.50\r\n3 Abilene  2000     3  9285000            9.28\r\n4 Abilene  2000     4  9730000            9.73\r\n5 Abilene  2000     5 10590000           10.6 \r\n6 Abilene  2000     6 13910000           13.9 \r\n\r\nPassing the new variable name as character string (indirect)\r\nInstead of passing the name of the variable as a character string as an argument, we can pass a variable containing the name of the variable. In the below example, the name of the new variable is stored in new_var. Using the new {glue} syntax, enabled by the walrus operator :=, we substitute the new_var variable with its value.\r\n\r\n\r\nmutate_var <- function(df, new_col_var, old_col_var, num = 1) {\r\n  dplyr::mutate(.data = df, \"{new_col_var}\" := df[[old_col_var]]/num) %>% \r\n    head()\r\n}\r\n\r\nnew_var <- \"vol_in_millions\"\r\nold_var <- \"volume\"\r\n\r\ntxhousing %>% \r\n  select(city, year, month, volume) %>%\r\n  mutate_var(new_var, old_var, 1E6)  # pass column names as variables\r\n\r\n\r\n# A tibble: 6 x 5\r\n  city     year month   volume vol_in_millions\r\n  <chr>   <int> <int>    <dbl>           <dbl>\r\n1 Abilene  2000     1  5380000            5.38\r\n2 Abilene  2000     2  6505000            6.50\r\n3 Abilene  2000     3  9285000            9.28\r\n4 Abilene  2000     4  9730000            9.73\r\n5 Abilene  2000     5 10590000           10.6 \r\n6 Abilene  2000     6 13910000           13.9 \r\n\r\narrange()\r\narrange() sorts the rows of a data frame by the values of selected columns. By default, it sorts in Ascending order. To force a column to sort in Descending order, we must use the desc() function.\r\nPassing single raw name\r\n\r\n\r\narrange_raw <- function(df, var) {\r\n  dplyr::arrange(.data = df, {{var}}) %>%    # embrace of curly-curly {{}} brackets\r\n    head()\r\n}\r\n\r\narrange_raw(txhousing, sales)\r\n\r\n\r\n# A tibble: 6 x 9\r\n  city         year month sales volume median listings inventory  date\r\n  <chr>       <int> <int> <dbl>  <dbl>  <dbl>    <dbl>     <dbl> <dbl>\r\n1 San Marcos   2011    10     6 1.16e6 180000      163       8.3 2012.\r\n2 Harlingen    2000     7     9 1.11e6  87500      719      30.8 2000.\r\n3 South Padr~  2011     1     9 2.09e6 225000     1258      55.7 2011 \r\n4 San Marcos   2011     1    10 1.48e6 140000      165       7.5 2011 \r\n5 San Marcos   2011    12    10 1.56e6 140000      148       8   2012.\r\n6 San Marcos   2014    11    10 1.51e6 146700       96       4   2015.\r\n\r\narrange_raw(txhousing, desc(sales))\r\n\r\n\r\n# A tibble: 6 x 9\r\n  city     year month sales     volume median listings inventory  date\r\n  <chr>   <int> <int> <dbl>      <dbl>  <dbl>    <dbl>     <dbl> <dbl>\r\n1 Houston  2015     7  8945 2568156780 217600    23875       3.4 2016.\r\n2 Houston  2006     6  8628 1795898108 155200    36281       5.6 2006.\r\n3 Houston  2013     7  8468 2168720825 187800    21497       3.3 2014.\r\n4 Houston  2015     6  8449 2490238594 222400    22311       3.2 2015.\r\n5 Houston  2013     5  8439 2121508529 186100    20526       3.3 2013.\r\n6 Houston  2014     6  8391 2342443127 211200    19725       2.9 2014.\r\n\r\narrange_raw() fails when we pass multiple raw names as a vector.\r\n\r\n\r\narrange_raw(txhousing, c(sales, volume))\r\n\r\n\r\nError: arrange() failed at implicit mutate() step. \r\n* Problem with `mutate()` column `..1`.\r\ni `..1 = c(sales, volume)`.\r\ni `..1` must be size 8602 or 1, not 17204.\r\n\r\n\r\nPassing multiple raw names using ... argument\r\nTo pass multiple raw names, we must use the ... argument.\r\n\r\n\r\narrange_raw_multiple <- function(df, ...) {\r\n  dplyr::arrange(.data = df, ...) %>% \r\n    head()\r\n}\r\n\r\narrange_raw_multiple(txhousing, city, sales)\r\n\r\n\r\n# A tibble: 6 x 9\r\n  city     year month sales  volume median listings inventory  date\r\n  <chr>   <int> <int> <dbl>   <dbl>  <dbl>    <dbl>     <dbl> <dbl>\r\n1 Abilene  2003     1    68 5385000  70000      668       5.4  2003\r\n2 Abilene  2011     1    68 8834493 123300      809       6.1  2011\r\n3 Abilene  2009     1    70 8414801  92900      861       6.3  2009\r\n4 Abilene  2000     1    72 5380000  71400      701       6.3  2000\r\n5 Abilene  2010     1    73 9130783 112200      868       6.4  2010\r\n6 Abilene  2001     1    75 5730000  64500      779       6.8  2001\r\n\r\narrange_raw_multiple(txhousing, city, desc(sales))\r\n\r\n\r\n# A tibble: 6 x 9\r\n  city     year month sales   volume median listings inventory  date\r\n  <chr>   <int> <int> <dbl>    <dbl>  <dbl>    <dbl>     <dbl> <dbl>\r\n1 Abilene  2015     7   268 45845730 148700      986       5   2016.\r\n2 Abilene  2015     6   260 41396230 141500      965       5   2015.\r\n3 Abilene  2007     7   239 29315000 114300      940       5.2 2008.\r\n4 Abilene  2013     8   236 30777727 120000      976       5.4 2014.\r\n5 Abilene  2014     7   231 35861350 145800     1033       5.8 2014.\r\n6 Abilene  2005     6   230 24050000  92500      664       4.1 2005.\r\n\r\nPass single column name as string\r\n\r\n\r\narrange_str <- function(df, var, .desc = FALSE) {\r\n  if (.desc) {\r\n    dplyr::arrange(.data = df, desc(df[[var]])) %>% head()\r\n  } else {\r\n    dplyr::arrange(.data = df, df[[var]]) %>% head()\r\n  }\r\n}\r\n\r\narrange_str(txhousing, \"sales\")\r\n\r\n\r\n# A tibble: 6 x 9\r\n  city         year month sales volume median listings inventory  date\r\n  <chr>       <int> <int> <dbl>  <dbl>  <dbl>    <dbl>     <dbl> <dbl>\r\n1 San Marcos   2011    10     6 1.16e6 180000      163       8.3 2012.\r\n2 Harlingen    2000     7     9 1.11e6  87500      719      30.8 2000.\r\n3 South Padr~  2011     1     9 2.09e6 225000     1258      55.7 2011 \r\n4 San Marcos   2011     1    10 1.48e6 140000      165       7.5 2011 \r\n5 San Marcos   2011    12    10 1.56e6 140000      148       8   2012.\r\n6 San Marcos   2014    11    10 1.51e6 146700       96       4   2015.\r\n\r\narrange_str(txhousing, \"sales\", .desc = TRUE)\r\n\r\n\r\n# A tibble: 6 x 9\r\n  city     year month sales     volume median listings inventory  date\r\n  <chr>   <int> <int> <dbl>      <dbl>  <dbl>    <dbl>     <dbl> <dbl>\r\n1 Houston  2015     7  8945 2568156780 217600    23875       3.4 2016.\r\n2 Houston  2006     6  8628 1795898108 155200    36281       5.6 2006.\r\n3 Houston  2013     7  8468 2168720825 187800    21497       3.3 2014.\r\n4 Houston  2015     6  8449 2490238594 222400    22311       3.2 2015.\r\n5 Houston  2013     5  8439 2121508529 186100    20526       3.3 2013.\r\n6 Houston  2014     6  8391 2342443127 211200    19725       2.9 2014.\r\n\r\nPass multiple column name as string\r\n\r\n\r\narrange_str_multiple <- function(df, var, desc = FALSE) {\r\n  if (desc) {\r\n    dplyr::arrange(.data = df, desc(df[var])) %>% head()\r\n  } else {\r\n    dplyr::arrange(.data = df, df[var]) %>% head()\r\n  }\r\n}\r\n\r\n# This function arranges the dataframe either all ascending\r\n# or all descending. Definitely need a better example.\r\n\r\narrange_str_multiple(txhousing, c(\"year\", \"month\", \"sales\"))\r\n\r\n\r\n# A tibble: 6 x 9\r\n  city         year month sales volume median listings inventory  date\r\n  <chr>       <int> <int> <dbl>  <dbl>  <dbl>    <dbl>     <dbl> <dbl>\r\n1 Paris        2000     1    19 1.44e6  71700      286       7.5  2000\r\n2 San Marcos   2000     1    22 2.38e6 106700      190       6.3  2000\r\n3 Lufkin       2000     1    28 2.28e6  68000       NA      NA    2000\r\n4 Harlingen    2000     1    31 3.91e6  87500      644      24.9  2000\r\n5 Galveston    2000     1    37 4.56e6  95000      636       9.1  2000\r\n6 Port Arthur  2000     1    40 3.09e6  68300      314       5.6  2000\r\n\r\narrange_str_multiple(txhousing, c(\"year\", \"month\", \"sales\"), desc = TRUE)\r\n\r\n\r\n# A tibble: 6 x 9\r\n  city       year month sales   volume median listings inventory  date\r\n  <chr>     <int> <int> <dbl>    <dbl>  <dbl>    <dbl>     <dbl> <dbl>\r\n1 Houston    2015     7  8945   2.57e9 217600    23875       3.4 2016.\r\n2 Dallas     2015     7  7038   2.02e9 233000    12292       2.4 2016.\r\n3 Austin     2015     7  3466   1.15e9 264600     7913       3   2016.\r\n4 San Anto~  2015     7  2962   7.05e8 198100     9462       4.1 2016.\r\n5 Collin C~  2015     7  1861   6.14e8 292600     2809       2.1 2016.\r\n6 Fort Bend  2015     7  1372   4.32e8 280400     3328       3.1 2016.\r\n\r\ngroup_by()\r\nIn group_by(), we select which columns to, well, group by! (Damn these well-named functions!). So one can use the same techniques as select() to choose the columns.\r\nIn the following examples, we will create only one summarised value total_sales for simplicity.\r\nPassing single raw name\r\n\r\n\r\ngroup_raw <- function(df, grp) {\r\n  df %>% \r\n    group_by({{grp}}) %>% \r\n    summarise(total_sales = sum(sales, na.rm = TRUE),\r\n              .groups = 'drop')  %>% \r\n    head(n=5)\r\n}\r\n\r\ngroup_raw(txhousing, year)        # Sum of sales per year\r\n\r\n\r\n# A tibble: 5 x 2\r\n   year total_sales\r\n  <int>       <dbl>\r\n1  2000      222483\r\n2  2001      231453\r\n3  2002      234600\r\n4  2003      253909\r\n5  2004      283999\r\n\r\ngroup_raw(txhousing, month)       # Sum of sales per month\r\n\r\n\r\n# A tibble: 5 x 2\r\n  month total_sales\r\n  <int>       <dbl>\r\n1     1      245924\r\n2     2      296410\r\n3     3      386909\r\n4     4      397332\r\n5     5      448968\r\n\r\nPassing multiple raw names using the ... operator\r\n\r\n\r\ngroup_raw_multiple <- function(df, ...) {\r\n  df %>% \r\n    group_by(...) %>% \r\n    summarise(total_sales = sum(sales, na.rm = TRUE),\r\n              .groups = 'drop')  %>% \r\n    head(n = 5)\r\n}\r\n\r\ngroup_raw_multiple(txhousing, year)              # Sum of sales per year\r\n\r\n\r\n# A tibble: 5 x 2\r\n   year total_sales\r\n  <int>       <dbl>\r\n1  2000      222483\r\n2  2001      231453\r\n3  2002      234600\r\n4  2003      253909\r\n5  2004      283999\r\n\r\ngroup_raw_multiple(txhousing, year, month)       # Sum of sales per month\r\n\r\n\r\n# A tibble: 5 x 3\r\n   year month total_sales\r\n  <int> <int>       <dbl>\r\n1  2000     1       11411\r\n2  2000     2       15674\r\n3  2000     3       20202\r\n4  2000     4       18658\r\n5  2000     5       22388\r\n\r\nPassing single or multiple column names as character string\r\n\r\n\r\ngroup_str <- function(df, grp) {\r\n  df %>% \r\n    group_by(df[grp]) %>% \r\n    summarise(total_sales = sum(sales, na.rm = TRUE),\r\n              .groups = 'drop')  %>% \r\n    head(n=5)\r\n}\r\n\r\ngroup_str(txhousing, \"year\")                   # Sum of sales per year\r\n\r\n\r\n# A tibble: 5 x 2\r\n   year total_sales\r\n  <int>       <dbl>\r\n1  2000      222483\r\n2  2001      231453\r\n3  2002      234600\r\n4  2003      253909\r\n5  2004      283999\r\n\r\ngroup_str(txhousing, c(\"year\", \"month\"))       # Sum of sales per month\r\n\r\n\r\n# A tibble: 5 x 3\r\n   year month total_sales\r\n  <int> <int>       <dbl>\r\n1  2000     1       11411\r\n2  2000     2       15674\r\n3  2000     3       20202\r\n4  2000     4       18658\r\n5  2000     5       22388\r\n\r\n# The same column names can be passed as variables containing the character names\r\nyr <- \"year\"\r\ngroup_str(txhousing, yr)\r\n\r\n\r\n# A tibble: 5 x 2\r\n   year total_sales\r\n  <int>       <dbl>\r\n1  2000      222483\r\n2  2001      231453\r\n3  2002      234600\r\n4  2003      253909\r\n5  2004      283999\r\n\r\nyrmon <- c(\"year\", \"month\")\r\ngroup_str(txhousing, yrmon)\r\n\r\n\r\n# A tibble: 5 x 3\r\n   year month total_sales\r\n  <int> <int>       <dbl>\r\n1  2000     1       11411\r\n2  2000     2       15674\r\n3  2000     3       20202\r\n4  2000     4       18658\r\n5  2000     5       22388\r\n\r\nIf you want the summarise column to have a custom name like total_<sumvar>, then you can wrap the value in quotes as below. This method uses the glue syntax enabled by the := walrus operator. The walrus operator takes either a raw name or a character string on its LHS.\r\n\r\n\r\ngroup_raw2 <- function(df, grp, sumvar) {\r\n  df %>% \r\n    group_by({{grp}}) %>% \r\n    summarise(\"total_{{sumvar}}\" := sum({{sumvar}}, na.rm = TRUE),\r\n              .groups = 'drop')  %>% \r\n    head(n=5)\r\n}\r\n\r\ngroup_raw2(txhousing, year, sales)            # Sum of sales per year\r\n\r\n\r\n# A tibble: 5 x 2\r\n   year total_sales\r\n  <int>       <dbl>\r\n1  2000      222483\r\n2  2001      231453\r\n3  2002      234600\r\n4  2003      253909\r\n5  2004      283999\r\n\r\ngroup_raw2(txhousing, month, listings)        # Sum of listings per month\r\n\r\n\r\n# A tibble: 5 x 2\r\n  month total_listings\r\n  <int>          <dbl>\r\n1     1        1854661\r\n2     2        1888104\r\n3     3        1949187\r\n4     4        1991278\r\n5     5        2038932\r\n\r\nAfter writing so many examples, I see a pattern. group_by() works with techniques similar to select() while summarise() works with techniques similar to mutate().\r\n(Slightly Better) Examples\r\nThe txhousing is a city-wise monthly sales and volume dataset. It has a year and month column. Let us create a date column and keep only those columns relevant for our custom tx_summary() function.\r\n\r\n\r\nsmall_df <- txhousing %>% \r\n  mutate(date = lubridate::as_date(glue::glue(\"{year}-{month}-01\"))) %>% \r\n  select(city, date, sales, volume)\r\n\r\n\r\n\r\nmutate() example\r\nNow let us create the create_ymq() function. This function would take 2 arguments, a data frame df and a raw name of a date column.\r\n\r\n\r\ncreate_ymq <- function(df, date_col) {\r\n  stopifnot(inherits(df, \"data.frame\"))\r\n  stopifnot(class(df %>% dplyr::pull({{date_col}})) == 'Date')\r\n  dplyr::mutate(df,\r\n                Year = lubridate::year({{date_col}}),\r\n                nHalf = lubridate::semester({{date_col}}),\r\n                yHalf = lubridate::semester({{date_col}}, with_year = TRUE),\r\n                dHalf = paste0(lubridate::semester({{date_col}}), \"H\", format({{date_col}},\"%y\")),\r\n                nQtr = lubridate::quarter({{date_col}}),\r\n                yQtr = lubridate::quarter({{date_col}}, with_year = TRUE),\r\n                dQtr = paste0(lubridate::quarter({{date_col}}),\"Q\", format({{date_col}},\"%y\")),\r\n                Month = lubridate::month({{date_col}}),\r\n                yMonth = as.numeric(format({{date_col}}, \"%Y.%m\")),\r\n                dMonth = format({{date_col}}, \"%b %Y\")\r\n                )\r\n}\r\n\r\ncreate_ymq(df = small_df, date_col = date) %>% glimpse()\r\n\r\n\r\nRows: 8,602\r\nColumns: 14\r\n$ city   <chr> \"Abilene\", \"Abilene\", \"Abilene\", \"Abilene\", \"Abilene\"~\r\n$ date   <date> 2000-01-01, 2000-02-01, 2000-03-01, 2000-04-01, 2000~\r\n$ sales  <dbl> 72, 98, 130, 98, 141, 156, 152, 131, 104, 101, 100, 9~\r\n$ volume <dbl> 5380000, 6505000, 9285000, 9730000, 10590000, 1391000~\r\n$ Year   <dbl> 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,~\r\n$ nHalf  <int> 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1,~\r\n$ yHalf  <dbl> 2000.1, 2000.1, 2000.1, 2000.1, 2000.1, 2000.1, 2000.~\r\n$ dHalf  <chr> \"1H00\", \"1H00\", \"1H00\", \"1H00\", \"1H00\", \"1H00\", \"2H00~\r\n$ nQtr   <int> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 1, 1, 1, 2, 2, 2,~\r\n$ yQtr   <dbl> 2000.1, 2000.1, 2000.1, 2000.2, 2000.2, 2000.2, 2000.~\r\n$ dQtr   <chr> \"1Q00\", \"1Q00\", \"1Q00\", \"2Q00\", \"2Q00\", \"2Q00\", \"3Q00~\r\n$ Month  <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5,~\r\n$ yMonth <dbl> 2000.01, 2000.02, 2000.03, 2000.04, 2000.05, 2000.06,~\r\n$ dMonth <chr> \"Jan 2000\", \"Feb 2000\", \"Mar 2000\", \"Apr 2000\", \"May ~\r\n\r\ngroup_by() example\r\nNow that we have a function that creates various date-related columns, let us create a function that letâs you create summary tables like annual sales per city, quarterly volumes per city etc.\r\n\r\n\r\ntx_summary <- function(df, grp_col, sum_col) {\r\n  df %>% \r\n    group_by(city, {{grp_col}}) %>% \r\n    summarise(\"total_{{sum_col}}\" := sum({{sum_col}}, na.rm = TRUE), .groups = 'drop')\r\n}\r\n\r\n\r\n\r\nUsing these 2 functions, we can now create multiple summary tables\r\n\r\n\r\nsmall_df_with_date_cols <- small_df %>% create_ymq(date_col = date)\r\n\r\n# Annual Sales per city\r\nsmall_df_with_date_cols %>% tx_summary(grp_col = Year, sum_col = sales)\r\n\r\n\r\n# A tibble: 736 x 3\r\n   city     Year total_sales\r\n   <chr>   <dbl>       <dbl>\r\n 1 Abilene  2000        1375\r\n 2 Abilene  2001        1431\r\n 3 Abilene  2002        1516\r\n 4 Abilene  2003        1632\r\n 5 Abilene  2004        1830\r\n 6 Abilene  2005        1977\r\n 7 Abilene  2006        1997\r\n 8 Abilene  2007        2003\r\n 9 Abilene  2008        1651\r\n10 Abilene  2009        1634\r\n# ... with 726 more rows\r\n\r\n# Half Yearly volumes per city\r\nsmall_df_with_date_cols %>% tx_summary(grp_col = yHalf, sum_col = volume)\r\n\r\n\r\n# A tibble: 1,472 x 3\r\n   city    yHalf total_volume\r\n   <chr>   <dbl>        <dbl>\r\n 1 Abilene 2000.     55400000\r\n 2 Abilene 2000.     53175000\r\n 3 Abilene 2001.     55795000\r\n 4 Abilene 2001.     58570000\r\n 5 Abilene 2002.     55305000\r\n 6 Abilene 2002.     63370000\r\n 7 Abilene 2003.     58175000\r\n 8 Abilene 2003.     77500000\r\n 9 Abilene 2004.     74205000\r\n10 Abilene 2004.     85465000\r\n# ... with 1,462 more rows\r\n\r\n# Quarterly Sales per city\r\nsmall_df_with_date_cols %>% tx_summary(grp_col = yQtr, sum_col = sales)\r\n\r\n\r\n# A tibble: 2,898 x 3\r\n   city     yQtr total_sales\r\n   <chr>   <dbl>       <dbl>\r\n 1 Abilene 2000.         300\r\n 2 Abilene 2000.         395\r\n 3 Abilene 2000.         387\r\n 4 Abilene 2000.         293\r\n 5 Abilene 2001.         305\r\n 6 Abilene 2001.         394\r\n 7 Abilene 2001.         401\r\n 8 Abilene 2001.         331\r\n 9 Abilene 2002.         295\r\n10 Abilene 2002.         425\r\n# ... with 2,888 more rows\r\n\r\n# Monthly Volumes per city\r\nsmall_df_with_date_cols %>% tx_summary(grp_col = yMonth, sum_col = volume)\r\n\r\n\r\n# A tibble: 8,602 x 3\r\n   city    yMonth total_volume\r\n   <chr>    <dbl>        <dbl>\r\n 1 Abilene  2000.      5380000\r\n 2 Abilene  2000.      6505000\r\n 3 Abilene  2000.      9285000\r\n 4 Abilene  2000.      9730000\r\n 5 Abilene  2000.     10590000\r\n 6 Abilene  2000.     13910000\r\n 7 Abilene  2000.     12635000\r\n 8 Abilene  2000.     10710000\r\n 9 Abilene  2000.      7615000\r\n10 Abilene  2000.      7040000\r\n# ... with 8,592 more rows\r\n\r\nMore ideas\r\nYou could further extend this by creating a custom filtering function that gives you, say, the rows with the highest or lowest total_sales or total_volume.\r\nConclusion\r\nThe ability to create such dynamic functions, enabled by the wonderful {dplyr} package, allows us to level-up in terms of programming with R and helps make our code neat and tidy.\r\nHow I feel while creating custom functions with {dplyr}! I can almost hear the music! Source: gifer.comReferences\r\nHadley Wickham, Romain FranÃ§ois, Lionel Henry and Kirill MÃ¼ller (2021). dplyr: A Grammar of Data Manipulation. R package version 1.0.7. https://CRAN.R-project.org/package=dplyr\r\nhttps://dplyr.tidyverse.org/articles/programming.html\r\nGarrett Grolemund, Hadley Wickham (2011). Dates and Times Made Easy with lubridate. Journal of Statistical Software, 40(3), 1-25. URL https://www.jstatsoft.org/v40/i03/.\r\nH. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016.\r\nJim Hester (2020). glue: Interpreted String Literals. R package version 1.4.2. https://CRAN.R-project.org/package=glue\r\n\r\n\r\n\r\n",
    "preview": "https://i.gifer.com/8inO.gif",
    "last_modified": "2021-07-27T10:19:46+05:30",
    "input_file": {}
  }
]
